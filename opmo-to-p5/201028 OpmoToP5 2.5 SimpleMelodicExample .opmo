(setf size 24)
(setf main-tonality '(c3 harmonic-minor))
(setf prog.chords '(c3g3c4ds4 f3gs3c4f4 ds3as3ds4g4 g3as3d4g4
             gs2gs3c4ds4 as2f3as3d4 c3g3c4ds4 d3fs3a3d4
             gs2ds3gs3c4 ds2ds3g3as3 f2c3gs3f4 c3g3c4ds4
             fs3a3c4ds4 gs2fs3c4d4 g2g3c4ds4 g2g3b3d4
             f2g3gs3ds4 d3gs3b3f4 f3gs3ds4g4 d3gs3b3f4
             gs2gs3c4ds4 as2f3d4as4 ds3g3ds4as4 gs2gs3ds4c5
             as2f3as3d5 ds3g3as3ds5 gs2f3d4f4 gs2f3as3d4
             gs2fs3c4d4 g2g3b3d4 c3g3c4ds4 d3fs3a3d4
             gs2gs3c4ds4 gs2b3d4f4 fs2a3c4ds4 g2g3c4ds4 g2g3b3d4 c3ds3g3ds4))

(setf mat '(e c3 p stacc e3 g3 c4 e4 g4 c5 e5 g5 e5 c5 g4 e4 c4 g3 e3))
(setf arp1 (gen-repeat size (list mat)))
(setf instr-B (assemble-seq arp1.map))
(setf ts-list (get-time-signature instr-B))
(setf span (get-span ts-list :sum t))
;;; ====================== OSC ======================
(defparameter SC '(127.0.0.1 57120))
(setf sc1 (create-osc-thread "SC/melSyn/freq" SC))
(setf sc2 (create-osc-thread "SC/melSyn/control" SC))
(setf sc3 (create-osc-thread "SC/fx/control" SC))
(setf sc4 (create-osc-thread "SC/fx/control2" SC))
(setf sc5 (create-osc-thread "SC/fx/control3" SC))

;; THREAD 1
;; Control Frequency in SC
(setf pitch-data1 (flatten (pitch-to-integer (omn :pitch instr-B))))
(setf time-data1 (flatten (ratio-to-sec (omn :length instr-B))))
(setf data1 (gen-osc-data
             (* 4 span)
             pitch-data1
             :time time-data1
             :bpm 60
             :loop t))
;; THREAD 2
;; Control Detuning in SC
(setf data2 (gen-osc-data 
             (* 2 span)
             (list-plot (gen-sine 20 2 1) :join-points 't)
             :time '(1/64)
             :min 0.1
             :max 0.5
             :bpm 60
             :loop t))

(setf data3 (gen-osc-data 
             (* 2 span)
             (gen-sine 40 2 1)
             :time '(1/2)
             :min 0.1
             :max 0.95
             :bpm 60
             :loop t))

(setf data4 (gen-osc-data 
             (* 2 span)
             (gen-sine 40 2 1)
             :time '(1/2)
             :min 0.1
             :max 1.9
             :bpm 60
             :loop t))
(setf data5 (gen-osc-data 
             (* 2 span)
             (gen-sine 40 2 1)
             :time '(1/2)
             :min 2.0
             :max 3.0
             :bpm 60
             :loop t))

(progn
  ;;; Sound 
  (send-osc-data sc1 data1) ;Synth - Pitch
  ;(send-osc-data sc2 data2) ;Synth - Detune
  ;(send-osc-data sc3 data3) ;FX - Dry Wet
  ;(send-osc-data sc4 data4) ;FX - Min Delay
  ;(send-osc-data sc5 data5) ;FX - Max Delay
)

;(end-all-osc-threads)